- name: install docker, awscli and login ecr 
  hosts: _development
  become: true
  vars:
    aws_region: us-east-1
    ecr_registry: 359414664399.dkr.ecr.us-east-1.amazonaws.com
  tasks: 
    - name: update all packages
      ansible.builtin.yum:
        name: "*"
        state: latest
    
    - name: remove old docker packages
      ansible.builtin.yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed

    - name: install 'yum-utils' package
      ansible.builtin.yum:
        name: "{{ item }}"
        state: latest
      with_items: 
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - unzip

    - name: add docker repo
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest:  /etc/yum.repos.d/docker-ce.repo
    
    - name: install docker
      ansible.builtin.package:
        name: docker-ce
        state: latest

    - name: add user ec2-user to docker group
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: yes

    - name: start docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: install aws cli
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /home/ec2-user/awscliv2.zip
    
    - name: unzip zip file
      ansible.builtin.unarchive:
        src: /home/ec2-user/awscliv2.zip
        dest: /home/ec2-user
        remove_src: true
    
    - name: run the aws cli installer
      ansible.builtin.command:
      args:
        cmd: "./aws/install"
        creates: /usr/local/bin/aws

    - name: login to AWS ec2-user
      ansible.builtin.shell:
        export PATH=/usr/local/bin:$PATH
        source ~/.bash_profile
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_registry }}



- name: configure postgre node
  hosts: _ansible_postgresql
  become: true
  vars:
    container_name: rizgar_postgre
    image_name: 359414664399.dkr.ecr.us-east-1.amazonaws.com/rizgar-repo/todo-app:postgre
  tasks:  
    - name: kill running {{ container_name }} container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true
    
    - name: remove {{ image_name }} image
      community.docker.docker_image:
        name: "{{ image_name }}"
        state: absent
      
    - name: run postgresql docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        ports: 
          - "5432:5432"
        env:
          POSTGRES_PASSWORD: "Pp123456789"
        volumes: 
          - /db-data:/var/lib/postgresql/data
      register: container_info




- name: configure nodejs node
  hosts: _ansible_nodejs
  become: true
  vars:
    container_name: rizgar_nodejs
    image_name: 359414664399.dkr.ecr.us-east-1.amazonaws.com/rizgar-repo/todo-app:nodejs
  tasks:
    - name: kill {{ container_name }} container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: delete {{ image_name }} image
      community.docker.docker_image:
        name: "{{ image_name }}"
        state: absent

    - name: run docker container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        ports: 
          - "5000:5000"
        state: started



- name: react UI server configuration
  hosts: _ansible_react
  become: true
  vars: 
    container_name: rizgar_react
    image_name: 359414664399.dkr.ecr.us-east-1.amazonaws.com/rizgar-repo/todo-app:react
  tasks: 
    - name: kill running {{ container_name }} container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: true

    - name: delete {{ image_name }} image
      community.docker.docker_image:
        name: "{{ image_name }}"
        state: absent

    - name: run the container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        ports:
          - "3000:3000"
        state: started